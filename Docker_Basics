docker pull <image>
docker pull <image:latest>

docker image
  - lists commands

docker image ls
  - lists containers

docker run [OPTIONS] IMAGE_NAME [COMMAND] [ARGUMENTS...] 
docker run -it helloworld /bin/bash
  - runs an interactive docker called hellow world and spawns a shell inside

docker ps
  - hostname of container and container id
  - lists running containers
  - ps -a to list all containers even non-running

  -d	This argument tells the container to start in "detached" mode. This means that the container will run in the background.	N/A	
docker run -d helloworld

-it	This argument has two parts. The "i" means run interactively, and "t" tells Docker to run a shell within the container. We would use this option if we wish to interact with the container directly once it runs.	N/A	
docker run -it helloworld

-v	This argument is short for "Volume" and tells Docker to mount a directory or file from the host operating system to a location within the container. The location these files get stored is defined in the Dockerfile	VOLUME	
docker run -v /host/os/directory:/container/directory helloworld

-p	This argument tells Docker to bind a port on the host operating system to a port that is being exposed in the container. You would use this instruction if you are running an application or service (such as a web server) in the container and wish to access the application/service by navigating to the IP address.	EXPOSE	
docker run -p 80:80 webserver

--rm	This argument tells Docker to remove the container once the container finishes running whatever it has been instructed to do.	N/A	
docker run --rm helloworld

--name	This argument lets us give a friendly, memorable name to the container. When a container is run without this option, the name is two random words. We can use this open to name a container after the application the container is running.	
N/A

docker run --name helloworld

---------------------------------------------------
DOCKER FILES

FROM	This instruction sets a build stage for the container as well as setting the base image (operating system). All Dockerfiles must start with this.	FROM ubuntu

RUN	This instruction will execute commands in the container within a new layer.	RUN whoami

COPY	
This instruction copies files from the local system to the working directory in the container (the syntax is similar to the cp command).

COPY /home/cmnatic/myfolder/app/

WORKDIR	
This instruction sets the working directory of the container. (similar to using cd on Linux). WORKDIR / (sets to the root of the filesystem in the container)


CMD	This instruction determines what command is run when the container starts (you would use this to start a service or application).	CMD /bin/sh -c script.sh


EXPOSE	This instruction is used to tell the person who runs the container what port they should publish when running the container. EXPOSE 80 (tells the person running the container to publish to port 80 i.e. docker run -p 80:80)


docker build -t helloworld .
docker image ls



docker build -t webserver . 
docker run -d --name webserver -p 80:80  webserver

-------------------------------------------------------
DOCKER COMPOSE

up	This command will (re)create/build and start the containers specified in the compose file.	
docker-compose up

start	This command will start (but requires the containers already being built) the containers specified in the compose file.
docker-compose start

down	This command will stop and delete the containers specified in the compose file.
docker-compose down

stop	This command will stop (not delete) the containers specified in the compose file.
docker-compose stop

build	This command will build (but will not start) the containers specified in the compose file.
docker-compose build

Creating the network between the two containers: docker network create ecommerce
Running the Apache2 webserver container: docker run -p 80:80 --name webserver --net ecommerce webserver
Running the MySQL Database server: docker run --name database --net ecommerce webserve

docker-compose up

Version	This is placed at the top of the file and is used to identify what version of Compose the docker-compose.yml is written for.
'3.3'
services	This instruction marks the beginning of the containers to be managed.	services:
name (replace value)	This instruction is where you define the container and its configuration. "name" needs to be replaced with the actual name of the container you want to define, i.e. "webserver" or "database".	webserver
build	This instruction defines the directory containing the Dockerfile for this container/service. (you will need to use this or an image).	./webserver
ports	This instruction publishes ports to the exposed ports (this depends on the image/Dockerfile).	'80:80'
volumes	This instruction lists the directories that should be mounted into the container from the host operating system.	'./home/cmnatic/webserver/:/var/www/html'
environment	This instruction is used to pass environment variables (not secure), i.e. passwords, usernames, timezone configurations, etc.	MYSQL_ROOT_PASSWORD=helloworld
Image	This instruction defines what image the container should be built with (you will need to use this or build).	mysql:latest
networks	This instruction defines what networks the containers will be a part of. Containers can be part of multiple networks (i.e. a web server can only contact one database, but the database can contact multiple web servers).	ecommerce

--------------------------------------------------------------
DOCKER SOCKET

Docker works in a client/server model.

Finally, it's important to note that because of this, the host machine running Docker can be configured to process commands sent from another device. This is an extremely dangerous vulnerability if it is not correctly configured because it means someone can remotely stop, start, and access Docker containers. 
